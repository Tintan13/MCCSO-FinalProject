<%- include('includes/header') %>

<div class="container mx-auto px-4 py-6">
    <h1 class="text-2xl font-bold mb-4">Inventory</h1>

    <div class="mb-4">
        <input type="text" id="searchInput" placeholder="Search..." 
               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
    </div>

    <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <div class="p-4 flex space-x-4 items-center">
            <button id="addEquipmentBtn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition">
                Add New Equipment
            </button>
            <button id="addCategoryBtn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600 transition">
                Add Category
            </button>
            <select id="sortBySelect" class="border border-gray-300 rounded px-3 py-2">
                <option disabled selected>Sort By</option>
                <option value="name">Name</option>
                <option value="date">Date Added</option>
                <option value="category">Category</option>
            </select>
        </div>

        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-100">
                    <tr>
                        <th class="px-4 py-2">ID</th>
                        <th class="px-4 py-2">Name</th>
                        <th class="px-4 py-2">Serial No.</th>
                        <th class="px-4 py-2">Model</th>
                        <th class="px-4 py-2">Brand</th>
                        <th class="px-4 py-2">Amount</th>
                        <th class="px-4 py-2">Purchase Date</th>
                        <th class="px-4 py-2">Category</th>
                        <th class="px-4 py-2">Actions</th>
                    </tr>
                </thead>
                <tbody id="inventoryTableBody">
                    <% inventory.forEach((item) => { %>
                        <tr class="border-b hover:bg-gray-50">
                            <td class="px-4 py-2"><%= item.id %></td>
                            <td class="px-4 py-2"><%= item.name %></td>
                            <td class="px-4 py-2"><%= item.serial_no %></td>
                            <td class="px-4 py-2"><%= item.model %></td>
                            <td class="px-4 py-2"><%= item.brand %></td>
                            <td class="px-4 py-2"><%= item.amount %></td>
                            <td class="px-4 py-2"><%= item.purchase_date %></td>
                            <td class="px-4 py-2"><%= item.category_name %></td>
                            <td class="px-4 py-2 text-center">
                                <button class="update-btn bg-green-500 text-white px-3 py-1 rounded mr-2 hover:bg-green-600"
                                        data-id="<%= item.id %>"
                                        data-name="<%= item.name %>"
                                        data-serial="<%= item.serial_no %>"
                                        data-model="<%= item.model %>"
                                        data-brand="<%= item.brand %>"
                                        data-amount="<%= item.amount %>"
                                        data-date="<%= item.purchase_date %>"
                                        data-category="<%= item.category_name %>">
                                    Update
                                </button>
                                <button class="delete-btn bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                                        data-id="<%= item.id %>">
                                    Delete
                                </button>
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="flex justify-center items-center p-4">
            <nav class="flex space-x-2">
                <button class="prev-btn px-3 py-1 border rounded disabled:opacity-50">Previous</button>
                <span class="page-info px-3 py-1">Page 1 of 2</span>
                <button class="next-btn px-3 py-1 border rounded">Next</button>
            </nav>
        </div>
    </div>
</div>

<!-- Add Equipment Modal -->
<div id="addEquipmentModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl w-96 p-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Add New Equipment</h2>
            <button id="closeAddModal" class="text-gray-600 hover:text-gray-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <form id="addEquipmentForm" action="/inventory/add" method="POST" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select name="category" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                    <option value="" disabled selected>Select a category</option>
                    <% categories.forEach((category) => { %>
                        <option value="<%= category.category_name %>">
                            <%= category.category_name %>
                        </option>
                    <% }) %>
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Item Name</label>
                <input type="text" name="item_name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Serial Number</label>
                <input type="text" name="serial_name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Model</label>
                <input type="text" name="model" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Brand</label>
                <input type="text" name="brand" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                <input type="number" name="amount" min="0" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Purchase Date</label>
                <input type="date" name="purchase_date" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div class="flex justify-end space-x-2 pt-4">
                <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition">
                    Save Equipment
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Update Equipment Modal -->
<div id="updateEquipmentModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center">
    <div class="bg-white rounded-lg shadow-xl w-96 p-6">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-bold">Update Equipment</h2>
            <button id="closeUpdateModal" class="text-gray-600 hover:text-gray-900">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>
        <form id="updateEquipmentForm" method="POST" class="space-y-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select id="update_category" name="category" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
                    <option value="" disabled>Select a category</option>
                    <% categories.forEach((category) => { %>
                        <option value="<%= category.id %>"><%= category.category_name %></option>
                    <% }) %>
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Item Name</label>
                <input type="text" id="update_item_name" name="item_name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Serial Number</label>
                <input type="text" id="update_serial_name" name="serial_name" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Model</label>
                <input type="text" id="update_model" name="model" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Brand</label>
                <input type="text" id="update_brand" name="brand" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Amount</label>
                <input type="number" id="update_amount" name="amount" min="0" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 mb-1">Purchase Date</label>
                <input type="date" id="update_purchase_date" name="purchase_date" class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500" required>
            </div>

            <div class="flex justify-end space-x-2 pt-4">
                <button type="submit" class="px-4 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition">
                    Update Equipment
                </button>
            </div>
        </form>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Modal functionality
    const addEquipmentBtn = document.getElementById('addEquipmentBtn');
    const addEquipmentModal = document.getElementById('addEquipmentModal');
    const updateEquipmentModal = document.getElementById('updateEquipmentModal');
    const closeAddModal = document.getElementById('closeAddModal');
    const closeUpdateModal = document.getElementById('closeUpdateModal');

    // Open Add Equipment Modal
    addEquipmentBtn.addEventListener('click', () => {
        addEquipmentModal.classList.remove('hidden');
    });

    // Close Add Equipment Modal
    closeAddModal.addEventListener('click', () => {
        addEquipmentModal.classList.add('hidden');
    });

    // Close Update Equipment Modal
    closeUpdateModal.addEventListener('click', () => {
        updateEquipmentModal.classList.add('hidden');
    });

    // Populate and Open Update Modal
    document.querySelectorAll('.update-btn').forEach(button => {
        button.addEventListener('click', function() {
            const modal = updateEquipmentModal;
            const form = modal.querySelector('form');
            
            // Populate form fields with data attributes
            form.querySelector('[name="category"]').value = this.getAttribute('data-category');
            form.querySelector('[name="item_name"]').value = this.getAttribute('data-name');
            form.querySelector('[name="serial_name"]').value = this.getAttribute('data-serial');
            form.querySelector('[name="model"]').value = this.getAttribute('data-model');
            form.querySelector('[name="brand"]').value = this.getAttribute('data-brand');
            form.querySelector('[name="amount"]').value = this.getAttribute('data-amount');
            form.querySelector('[name="purchase_date"]').value = this.getAttribute('data-date');

            // Set form action
            const id = this.getAttribute('data-id');
            form.action = `/inventory/update/${id}`;

            // Show modal
            modal.classList.remove('hidden');
        });
    });

    // Delete functionality
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            if (confirm('Are you sure you want to delete this item?')) {
                fetch(`/inventory/delete/${id}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (response.ok) {
                        // Remove the row from the table
                        this.closest('tr').remove();
                    } else {
                        alert('Failed to delete item');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the item');
                });
            }
        });
    });

    // Search functionality
    const searchInput = document.getElementById('searchInput');
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        const rows = document.querySelectorAll('#inventoryTableBody tr');
        
        rows.forEach(row => {
            const text = row.textContent.toLowerCase();
            row.style.display = text.includes(searchTerm) ? '' : 'none';
        });
    });

    // Sort functionality
    const sortBySelect = document.getElementById('sortBySelect');
    sortBySelect.addEventListener('change', function() {
        const sortBy = this.value;
        const tbody = document.getElementById('inventoryTableBody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        rows.sort((a, b) => {
            const cellIndex = {
                'name': 1,
                'date': 6,
                'category': 7
            }[sortBy];

            const aText = a.querySelector(`td:nth-child(${cellIndex})`).textContent;
            const bText = b.querySelector(`td:nth-child(${cellIndex})`).textContent;

            return aText.localeCompare(bText);
        });

        // Reinsert sorted rows
        rows.forEach(row => tbody.appendChild(row));
    });

    // Form submission handlers
    document.getElementById('addEquipmentForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);

        fetch('/inventory/add', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            // Close modal and potentially refresh or add new row
            addEquipmentModal.classList.add('hidden');
            location.reload(); // Simple approach, could be replaced with more dynamic update
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to add equipment');
        });
    });

    document.getElementById('updateEquipmentForm').addEventListener('submit', function(e) {
        e.preventDefault();
        const formData = new FormData(this);
        const action = this.getAttribute('action');

        fetch(action, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            // Close modal and potentially refresh or update row
            updateEquipmentModal.classList.add('hidden');
            location.reload(); // Simple approach, could be replaced with more dynamic update
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to update equipment');
        });
    });
});
</script>

<%- include('includes/footer') %>
<%- include('includes/scripts') %>