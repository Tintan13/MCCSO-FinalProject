<%- include('includes/header') %>

<div class="w-full px-4 sm:px-6 lg:px-8 py-8">
    <!-- Department Header -->
    <div class="mb-6 flex items-center container mx-auto">
        <h1 class="text-3xl font-bold text-gray-900 mr-4"></h1>
    </div>


     <!-- Search and Main Content Container -->
     <div class="container mx-auto">
        <!-- Search Bar -->
        <div class="mb-6">
            <div class="relative">
                <input type="text" 
                       class="w-full pl-4 pr-10 py-2 border-2 border-gray-200 rounded-lg focus:outline-none focus:border-blue-500 transition-colors" 
                       placeholder="Search departments..." 
                       aria-label="Search">
                <svg class="absolute right-3 top-2.5 h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                </svg>
            </div>
        </div>

  <!-- Main Content Card -->
<div class="bg-white rounded-lg shadow-sm">
    <div class="p-6">
        <!-- Add Button -->
        <div class="mb-6">
            <button class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors"
                    onclick="openModal('addDepartmentModal')">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path d="M12 4v16m8-8H4" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                </svg>
                Add New Department
            </button>
        </div>

        <!-- Table -->
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Department Name
                        </th>
                        <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <% departments.forEach(department => { %>
                        <tr id="department-<%= department.department_id %>" class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                <%= department.department_name %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm space-x-2">
                                <button class="inline-flex items-center px-3 py-1.5 bg-green-600 hover:bg-green-700 text-white rounded-md transition-colors update-btn"
                                        data-id="<%= department.department_id %>"
                                        data-name="<%= department.department_name %>"
                                        onclick="openUpdateModal(this)">
                                    <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                                    </svg>
                                    Update
                                </button>
                                <!---<button class="inline-flex items-center px-3 py-1.5 bg-red-600 hover:bg-red-700 text-white rounded-md transition-colors delete-btn"
                                        data-id="<%= department.department_id %>"
                                        onclick="confirmDeleteDepartment(this)">
                                    <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6z" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                                    </svg>
                                    Delete
                                </button>--->
                            </td>
                        </tr>
                    <% }) %>
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <% if (pagination.totalPages > 1) { %>
            <div class="flex items-center justify-between px-4 py-3 sm:px-6">
                <div class="flex justify-between sm:hidden">
                    <!-- Mobile pagination -->
                </div>
                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                    <div>
                        <p class="text-sm text-gray-700">
                            Showing <%= ((pagination.page - 1) * 10) + 1 %> to 
                            <%= Math.min(pagination.page * 10, pagination.totalRecords) %> 
                            of <%= pagination.totalRecords %> records
                        </p>
                    </div>
                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                        <!-- Previous Page -->
                        <a href="?page=<%= pagination.page - 1 %>" 
                           class="<%= !pagination.hasPrev ? 'opacity-50 cursor-not-allowed' : '' %> relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                            Previous
                        </a>
                        
                        <!-- Page Numbers -->
                        <% for(let i = 1; i <= pagination.totalPages; i++) { %>
                            <a href="?page=<%= i %>" 
                               class="<%= pagination.page === i ? 'z-10 bg-green-50 border-green-500 text-green-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50' %> relative inline-flex items-center px-4 py-2 border text-sm font-medium">
                                <%= i %>
                            </a>
                        <% } %>
                        
                        <!-- Next Page -->
                        <a href="?page=<%= pagination.page + 1 %>" 
                           class="<%= !pagination.hasNext ? 'opacity-50 cursor-not-allowed' : '' %> relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                            Next
                        </a>
                    </nav>
                </div>
            </div>
        <% } %>
    </div>
</div>

<!-- Add Department Modal -->
<div id="addDepartmentModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex items-center justify-center min-h-screen px-4">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
        
        <div class="relative bg-white rounded-lg max-w-md w-full">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Add New Department</h3>
                <button onclick="closeModal('addDepartmentModal')" class="absolute top-4 right-4 text-gray-400 hover:text-gray-500">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                    </svg>
                </button>
            </div>
            
            <form id="addDepartmentForm" class="px-6 py-4">
                <div class="mb-4">
                    <label for="department_name" class="block text-sm font-medium text-gray-700 mb-2">Department Name</label>
                    <input type="text" 
                            id="department_name" 
                            name="department_name" 
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500" 
                            required>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" 
                            onclick="closeModal('addDepartmentModal')"
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="button" 
                            id="saveDepartmentBtn"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                        Save
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Modal for Updating Department -->
<div id="updateDepartmentModal" class="fixed inset-0 z-50 hidden overflow-y-auto">
    <div class="flex items-center justify-center min-h-screen px-4">
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"></div>
        
        <div class="relative bg-white rounded-lg max-w-md w-full">
            <div class="px-6 py-4 border-b border-gray-200">
                <h3 class="text-lg font-medium text-gray-900">Update Department</h3>
                <button onclick="closeModal('updateDepartmentModal')" class="absolute top-4 right-4 text-gray-400 hover:text-gray-500">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path d="M6 18L18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"/>
                    </svg>
                </button>
            </div>
            
            <form id="updateDepartmentForm" class="px-6 py-4">
                <input type="hidden" id="update_department_id" name="department_id">
                <div class="mb-4">
                    <label for="update_department_name" class="block text-sm font-medium text-gray-700 mb-2">Department Name</label>
                    <input type="text" 
                           id="update_department_name" 
                           name="department_name" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-blue-500" 
                           required>
                </div>
                
                <div class="flex justify-end gap-3 mt-6">
                    <button type="button" 
                            onclick="closeModal('updateDepartmentModal')"
                            class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="button" 
                            id="updateDepartmentBtn"
                            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700">
                        Update
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // Get the search input element
    const searchInput = document.querySelector('input[aria-label="Search"]');
    const paginationContainer = document.querySelector('nav[aria-label="Page navigation"]');
    const recordsInfo = document.querySelector('.text-muted');

    function openModal(modalId) {
    document.getElementById(modalId).classList.remove('hidden');
}

function closeModal(modalId) {
    document.getElementById(modalId).classList.add('hidden');
}

    
    // Add event listener for real-time search
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        if (searchTerm) {
            paginationContainer.style.display = 'none';
            recordsInfo.style.display = 'none';
        } else {
            paginationContainer.style.display = 'block';
            recordsInfo.style.display = 'block';
        }
    
        const tableRows = document.querySelectorAll('tbody tr');
        tableRows.forEach(row => {
            const departmentName = row.querySelector('td:first-child').textContent.toLowerCase();
            row.style.display = departmentName.includes(searchTerm) ? '' : 'none';
        });
    });
    
    // Add Department
    document.getElementById('saveDepartmentBtn').addEventListener('click', function() {
        const form = document.getElementById('addDepartmentForm');
        const departmentName = document.getElementById('department_name').value.trim();
    
        if (!departmentName) return;
    
        fetch('/department/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ department_name: departmentName }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const newDepartmentRow = `
                    <tr id="department-${data.department.department_id}">
                        <td>${data.department.department_name}</td>
                        <td class="text-center">
                            <button class="btn btn-success btn-sm update-btn" 
                                    data-id="${data.department.department_id}"
                                    data-name="${data.department.department_name}"
                                    data-bs-toggle="modal" 
                                    data-bs-target="#updateDepartmentModal">
                                Update
                            </button>
                        </td>
                    </tr>
                `;
                document.querySelector('tbody').insertAdjacentHTML('beforeend', newDepartmentRow);
                form.reset();
                const modal = bootstrap.Modal.getInstance(document.getElementById('addDepartmentModal'));
                modal.hide();
            } else {
                // Handle error (e.g., alert(data.error))
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    });
    
    // Update Department
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('update-btn')) {
            const id = e.target.dataset.id;
            const name = e.target.dataset.name;
            document.getElementById('update_department_id').value = id;
            document.getElementById('update_department_name').value = name;
        }
    });
    
    document.getElementById('updateDepartmentBtn').addEventListener('click', function() {
        const id = document.getElementById('update_department_id').value;
        const name = document.getElementById('update_department_name').value;
    
        fetch(`/department/update/${id}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ department_name: name }),
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                const row = document.querySelector(`#department-${id} td:first-child`);
                row.textContent = name;
                $('#updateDepartmentModal').modal('hide');
            } else {
                // Handle error (e.g., alert(data.error))
            }
        })
        .catch(error => {
            console.error('Error:', error);
        });
    });


    function openUpdateModal(element) {
    const id = element.getAttribute('data-id');
    const name = element.getAttribute('data-name');
    
    // Set values in the update modal
    document.getElementById('update_department_id').value = id;
    document.getElementById('update_department_name').value = name;
    
    // Show the update modal
    document.getElementById('updateDepartmentModal').classList.remove('hidden');
}


function confirmDeleteDepartment(element) {
    const id = element.getAttribute('data-id');
    if (confirm('Are you sure you want to delete this department?')) {
        deleteDepartment(id);
    }
}

function deleteDepartment(departmentId) {
    fetch(`/department/delete/${departmentId}`, {
        method: 'DELETE',
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Remove the row from the table
            const row = document.getElementById(`department-${departmentId}`);
            if (row) {
                row.remove();
            }
        } else {
            alert(data.error || 'Failed to delete department');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('An error occurred while deleting the department');
    });
}


    </script>
    
    <%- include('includes/footer') %>
    <%- include('includes/scripts') %>
    