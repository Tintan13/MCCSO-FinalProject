<%- include('includes/header') %>


<div class="container mx-auto px-4 py-8 bg-gray-50 min-h-screen">
    <!-- Header Section -->
    <div class="mb-6">
        <h1 class="text-2xl sm:text-3xl font-bold text-gray-800 mb-4"></h1>
        
        <!-- Search and Add New Row -->
       <!-- Search and Add New Row -->
<div class="flex flex-col sm:flex-row justify-between gap-4">
    <div class="flex items-center space-x-4 w-full">
        <!-- Search Input -->
        <div class="relative flex-grow sm:w-96">
            <input type="text" 
                   id="searchInput" 
                   class="w-full pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent"
                   placeholder="Search item...">
            <div class="absolute left-3 top-2.5">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>
        </div>

    </div>

    <button class="flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-lg shadow-sm hover:bg-green-700 transition-colors w-full sm:w-auto"
            data-bs-toggle="modal" 
            data-bs-target="#addItemModal">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
        </svg>
        Add New Item
    </button>


    <button class="flex items-center justify-center px-4 py-2 bg-blue-500 text-white rounded-lg shadow-sm hover:bg-blue-600 transition-colors w-full sm:w-auto ml-4"
        id="generatePersonnelReportsBtn">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
    </svg>
    Generate Personnel Reports
</button>


</div>

    <!-- Main Content Card -->
    <div class="bg-white rounded-xl shadow-md overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            ID
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Category
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Item
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                          Product No
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Serial No
                          </th>
                          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Model
                          </th>
                          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Brand
                          </th>
                          <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Amount
                          </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Personnel
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Department
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Request Date
                        </th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Condition
                        </th>
                        <th scope="col" class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    <% items.forEach(item => { %>
                        <tr id="personel-row-" class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="category">
                                <%= item.id %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="category">
                                <%= item.category %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="item">
                                <%= item.item_name %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="item">
                                <%= item.product_number %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="item">
                                <%= item.serial_number %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="item">
                                <%= item.model %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="item">
                                <%= item.brand %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="item">
                                <%= item.amount %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="personnel">
                                <%= item.personnel %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="department">
                                <%= item.department %>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" data-field="department">
                                <%= new Date(item.request_date).toLocaleDateString('en-US', {
                                    year: 'numeric',
                                    month: '2-digit',
                                    day: '2-digit'
                                }) %>
                                
                            </td>
                            <td 
                                class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 
                                <%= item.item_condition === 'Working' ? 'bg-green-100' : item.item_condition === 'Broken' ? 'bg-blue-100' : 'bg-red-100' %>"
                                data-field="item-condition"
                            >
                                <%= item.item_condition %>
                          </td>
                        
                        
                            <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                <button class="update-btn inline-flex items-center px-3 py-1.5 bg-green-100 text-green-700 rounded-md hover:bg-green-200 mr-2 transition-colors"
                                data-id="<%= item.id %>"
                                data-category="<%= item.category %>"
                                data-item="<%= item.item_name %>"
                                data-product-number="<%= item.product_number %>"
                                data-serial-number="<%= item.serial_number %>"
                                data-model="<%= item.model %>"
                                data-brand="<%= item.brand %>"
                                data-amount="<%= item.amount %>"
                                data-department="<%= item.department %>"
                                data-personnel="<%= item.personnel %>"
                                data-condition="<%= item.item_condition %>"
                                data-request-date="<%= item.request_date %>"
                                data-bs-toggle="modal" 
                                data-bs-target="#updateItemModal">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                            </svg>
                            Update
                        </button>
                                <button class="delete-btn inline-flex items-center px-3 py-1.5 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors"
                                        data-id="">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                    Delete
                                </button>
                            </td>
                        </tr>
                        <% }) %>
                </tbody>
            </table>
        </div>

    <!-- Pagination -->
<div class="bg-gray-50 px-4 py-3 border-t border-gray-200 sm:px-6">
    <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
        <!-- Records Info -->
        <div class="text-sm text-gray-700">
            Showing <span class="font-medium"><%= pagination.startRecord %></span> 
            to <span class="font-medium"><%= pagination.endRecord %></span> 
            of <span class="font-medium"><%= pagination.totalRecords %></span> records
        </div>

        <!-- Pagination Navigation -->
        <nav>
            <ul class="flex items-center gap-2">
                <!-- Previous Button -->
                <% if (pagination.hasPrev) { %>
                    <li>
                        <a 
                            class="px-3 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition" 
                            href="?page=<%= pagination.page - 1 %>"
                        >
                            Previous
                        </a>
                    </li>
                <% } else { %>
                    <li>
                        <span class="px-3 py-2 bg-gray-100 text-gray-400 rounded-md cursor-not-allowed">
                            Previous
                        </span>
                    </li>
                <% } %>

                <!-- Page Numbers -->
                <% for (let i = 1; i <= pagination.totalPages; i++) { %>
                    <li>
                        <a 
                            class="px-3 py-2 rounded-md <%= pagination.page === i ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300 transition' %>" 
                            href="?page=<%= i %>"
                        >
                            <%= i %>
                        </a>
                    </li>
                <% } %>

                <!-- Next Button -->
                <% if (pagination.hasNext) { %>
                    <li>
                        <a 
                            class="px-3 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition" 
                            href="?page=<%= pagination.page + 1 %>"
                        >
                            Next
                        </a>
                    </li>
                <% } else { %>
                    <li>
                        <span class="px-3 py-2 bg-gray-100 text-gray-400 rounded-md cursor-not-allowed">
                            Next
                        </span>
                    </li>
                <% } %>
            </ul>
        </nav>
    </div>
</div>




    </div>
</div>


<!-- Delete Confirmation Modal -->
<div id="deleteItemModal" class="fixed inset-0 z-50 hidden overflow-y-auto" aria-labelledby="deleteItemModalLabel">
    <div class="flex min-h-screen items-end justify-center px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 transition-opacity" aria-hidden="true">
            <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
        </div>

        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

        <div class="inline-block transform overflow-hidden rounded-lg bg-white text-left align-bottom shadow-xl transition-all sm:my-8 sm:w-full sm:max-w-lg sm:align-middle">
            <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex h-12 w-12 flex-shrink-0 items-center justify-center rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left">
                        <h3 class="text-lg font-medium leading-6 text-gray-900" id="deleteItemModalLabel">
                            Delete Item
                        </h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-500">
                                Are you sure you want to delete this item?
                            </p>
                            <p class="mt-1 text-sm font-bold text-gray-700">
                                <span id="deleteItemName"></span>
                            </p>
                            <p class="text-sm text-gray-600">
                                Category: <span id="deleteItemCategory"></span>
                            </p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
                <button id="confirmDeleteBtn" type="button" class="inline-flex w-full justify-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-base font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 sm:ml-3 sm:w-auto sm:text-sm">
                    Delete
                </button>
                <button id="cancelDeleteBtn" type="button" class="mt-3 inline-flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-base font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</div>



<!-- Add Item Modal -->
<div class="modal fade fixed top-0 left-0 hidden w-full h-full outline-none overflow-x-hidden overflow-y-auto bg-gray-900 bg-opacity-50 z-50" 
     id="addItemModal" 
     tabindex="-1" 
     aria-labelledby="addItemModalLabel" 
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered relative w-auto pointer-events-none max-w-lg mx-auto my-8">
        <div class="modal-content border-none shadow-lg relative flex flex-col w-full pointer-events-auto bg-white bg-clip-padding rounded-md outline-none text-current">
            <!-- Modal Header -->
            <div class="modal-header flex flex-shrink-0 items-center justify-between p-4 border-b border-gray-200 rounded-t-md">
                <h5 class="text-xl font-medium leading-normal text-gray-800" id="addItemModalLabel">
                    Add New Item
                </h5>
                <button type="button" 
                        class="btn-close box-content w-4 h-4 p-1 text-black border-none rounded-none opacity-50 focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black hover:opacity-75 hover:no-underline"
                        data-bs-dismiss="modal" 
                        aria-label="Close">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body relative p-4">
                <form id="addItemForm" action="/item/add" method="POST" class="grid grid-cols-3 gap-4">
                    <div class="form-group">
                        <label for="category" class="block text-sm font-medium text-gray-700 mb-1">
                            Category
                        </label>
                        <select 
                            class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                            id="category"
                            name="category">
                            <option value="">Select Category</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="item_name" class="block text-sm font-medium text-gray-700 mb-1">
                            Item
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="item_name" 
                               name="item_name" 
                               required>
                    </div>
                
                    <div class="form-group">
                        <label for="product_number" class="block text-sm font-medium text-gray-700 mb-1">
                            Product Number
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="product_number" 
                               name="product_number" 
                               readonly>
                    </div>

                    <div class="form-group">
                        <label for="serial_number" class="block text-sm font-medium text-gray-700 mb-1">
                            Serial Number
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="serial_number" 
                               name="serial_number" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="model" class="block text-sm font-medium text-gray-700 mb-1">
                            Model
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="model" 
                               name="model" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="brand" class="block text-sm font-medium text-gray-700 mb-1">
                            Brand
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="brand" 
                               name="brand" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="amount" class="block text-sm font-medium text-gray-700 mb-1">
                            Amount
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="amount" 
                               name="amount" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="personnel" class="block text-sm font-medium text-gray-700 mb-1">
                            Personnel
                        </label>
                        <select 
                            class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                            id="personnel"
                            name="personnel">
                            <option value="">Select Personnel</option>
                        </select>
                    </div>
                
                    <div class="form-group">
                        <label for="department" class="block text-sm font-medium text-gray-700 mb-1">
                            Department
                        </label>
                        <select 
                            class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                            id="department"
                            name="department">
                            <option value="">Select Department</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="request_date" class="block text-sm font-medium text-gray-700 mb-1">
                            Request Date
                        </label>
                        <input type="date" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="request_date" 
                               name="request_date">
                    </div>

                    <div class="form-group">
                        <label for="item_condition" class="block text-sm font-medium text-gray-700 mb-1">
                            Condition
                        </label>
                        <select 
                            class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                            id="item_condition"
                            name="item_condition">
                            <option value="">Select Condition</option>
                            <option value="Working">Working</option>
                            <option value="Broken">Broken</option>
                            <option value="Condemned">Condemned</option>
                        </select>
                    </div>
                    
                </form>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer flex flex-shrink-0 flex-wrap items-center justify-end p-4 border-t border-gray-200 rounded-b-md">
                <button type="button" class="bg-gray-500 text-white px-4 py-2 rounded" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" form="addItemForm" class="bg-green-600 text-white px-4 py-2 rounded ml-3">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Update Item Modal -->
<div class="modal fade fixed top-0 left-0 hidden w-full h-full outline-none overflow-x-hidden overflow-y-auto bg-gray-900 bg-opacity-50 z-50" 
     id="updateItemModal" 
     tabindex="-1" 
     aria-labelledby="updateItemModalLabel" 
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered relative w-auto pointer-events-none max-w-lg mx-auto my-8">
        <div class="modal-content border-none shadow-lg relative flex flex-col w-full pointer-events-auto bg-white bg-clip-padding rounded-md outline-none text-current">
            <!-- Modal Header -->
            <div class="modal-header flex flex-shrink-0 items-center justify-between p-4 border-b border-gray-200 rounded-t-md">
                <h5 class="text-xl font-medium leading-normal text-gray-800" id="updateItemModalLabel">
                    Update Item
                </h5>
                
                <button type="button" 
                        class="btn-close box-content w-4 h-4 p-1 text-black border-none rounded-none opacity-50 focus:shadow-none focus:outline-none focus:opacity-100 hover:text-black hover:opacity-75 hover:no-underline"
                        data-bs-dismiss="modal" 
                        aria-label="Close">
                    <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                    </svg>
                </button>
            </div>

            <!-- Modal Body -->
            <div class="modal-body relative p-4">
                <form id="update-item-form" class="grid grid-cols-3 gap-4">
                    <div class="form-group">
                        <label for="update-category" class="block text-sm font-medium text-gray-700 mb-1">
                            Category
                        </label>
                        <select class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                                id="update-category" 
                                name="category">
                            <option value="">Select Category</option>
                            <option value=""></option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="update-item-name" class="block text-sm font-medium text-gray-700 mb-1">
                            Item
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-item-name" 
                               name="item_name" 
                               required>
                    </div>
                
                    <div class="form-group">
                        <label for="update-product-number" class="block text-sm font-medium text-gray-700 mb-1">
                            Product Number
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-product-number" 
                               name="product_number" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="update-serial-number" class="block text-sm font-medium text-gray-700 mb-1">
                            Serial Number
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-serial-number" 
                               name="serial_number" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="update-model" class="block text-sm font-medium text-gray-700 mb-1">
                            Model
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-model" 
                               name="model" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="update-brand" class="block text-sm font-medium text-gray-700 mb-1">
                            Brand
                        </label>
                        <input type="text" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-brand" 
                               name="brand" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="update-amount" class="block text-sm font-medium text-gray-700 mb-1">
                            Amount
                        </label>
                        <input type="number" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-amount" 
                               name="amount" 
                               required>
                    </div>

                    <div class="form-group">
                        <label for="update-personnel" class="block text-sm font-medium text-gray-700 mb-1">
                            Personnel
                        </label>
                        <select class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                                id="update-personnel" 
                                name="personnel">
                            <option value="">Select Personnel</option>
                            <option value=""></option>
                        </select>
                    </div>
                
                    <div class="form-group">
                        <label for="update-department" class="block text-sm font-medium text-gray-700 mb-1">
                            Department
                        </label>
                        <select class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                                id="update-department" 
                                name="department">
                            <option value="">Select Department</option>
                            <option value=""></option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="update-request-date" class="block text-sm font-medium text-gray-700 mb-1">
                            Request Date
                        </label>
                        <input type="date" 
                               class="form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                               id="update-request-date" 
                               name="request_date">
                    </div>

                    <div class="form-group">
                        <label for="update-condition" class="block text-sm font-medium text-gray-700 mb-1">
                            Condition
                        </label>
                        <select 
                        class="form-select block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-green-600 focus:outline-none focus:ring-2 focus:ring-green-500"
                        id="update-condition"
                        name="item_condition">
                        <option value="">Select Condition</option>
                        <option value="Working">Working</option>
                        <option value="Broken">Broken</option>
                        <option value="Condemned">Condemned</option>
                    </select>
                    </div>
                </form>
            </div>

            <!-- Modal Footer -->
            <div class="modal-footer flex flex-shrink-0 flex-wrap items-center justify-end p-4 border-t border-gray-200 rounded-b-md">
                <button type="button"
                        class="inline-flex items-center px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
                        data-bs-dismiss="modal">
                    Cancel
                </button>
                <button type="button"
                        id="save-changes-btn"
                        class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors ml-3">
                    Save Changes
                </button>
            </div>
        </div>
    </div>
</div>


<script>
document.addEventListener('DOMContentLoaded', () => {
    // Helper function to populate dropdowns
    const populateDropdown = (selectElement, data, valueKey, textKey) => {
        // Clear existing options except the first (default) option
        while (selectElement.options.length > 1) {
            selectElement.remove(1);
        }

        // Populate dropdown
        data.forEach(item => {
            const option = document.createElement('option');
            option.value = item[valueKey];
            option.textContent = item[textKey];
            selectElement.appendChild(option);
        });
    };

    // Fetch and populate categories
    const categorySelects = [
        document.getElementById('category'),
        document.getElementById('update-category')
    ];

    fetch('/categories')
        .then(response => response.json())
        .then(data => {
            categorySelects.forEach(select => {
                populateDropdown(select, data, 'category_name', 'category_name');
            });
        })
        .catch(error => {
            console.error('Error fetching categories:', error);
        });

    // Fetch and populate departments
    const departmentSelects = [
        document.getElementById('department'),
        document.getElementById('update-department')
    ];

    fetch('/departments')
        .then(response => response.json())
        .then(data => {
            departmentSelects.forEach(select => {
                populateDropdown(select, data, 'department_name', 'department_name');
            });
        })
        .catch(error => {
            console.error('Error fetching departments:', error);
        });

    // Fetch and populate personnel
    const personnelSelects = [
        document.getElementById('personnel'),
        document.getElementById('update-personnel')
    ];

    fetch('/personnels')
        .then(response => response.json())
        .then(data => {
            personnelSelects.forEach(select => {
                populateDropdown(select, data, 'personnel_name', 'personnel_name');
            });
        })
        .catch(error => {
            console.error('Error fetching personnel:', error);
        });

    // Populate condition dropdowns
    const conditionSelects = [
        document.getElementById('item_condition'),
        document.getElementById('update-condition')
    ];

    const conditionOptions = [
        { value: '', text: 'Select Condition' },
        { value: 'Working', text: 'Working' },
        { value: 'Broken', text: 'Broken' },
        { value: 'Condemned', text: 'Condemned' }
    ];

    conditionSelects.forEach(select => {
        // Clear existing options
        while (select.options.length > 0) {
            select.remove(0);
        }

        // Repopulate with condition options
        conditionOptions.forEach(option => {
            const optionElement = document.createElement('option');
            optionElement.value = option.value;
            optionElement.textContent = option.text;
            select.appendChild(optionElement);
        });
    });
});
    document.addEventListener('DOMContentLoaded', () => {
        // Generate a random 4-digit number
        const randomNumber = Math.floor(1000 + Math.random() * 9000);

        // Set the value of the input field
        const productNumberInput = document.getElementById('product_number');
        productNumberInput.value = `MCC-${randomNumber}`;
    });



    document.addEventListener('DOMContentLoaded', () => {
    // Get all update buttons
    const updateButtons = document.querySelectorAll('.update-btn');

    // Add event listener to each update button
    updateButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            // Extract data attributes from the clicked button
            const category = button.getAttribute('data-category');
            const item_name = button.getAttribute('data-item');
            const product_number = button.getAttribute('data-product-number');
            const serial_number = button.getAttribute('data-serial-number');
            const model = button.getAttribute('data-model');
            const brand = button.getAttribute('data-brand');
            const amount = button.getAttribute('data-amount');
            const personnel = button.getAttribute('data-personnel');
            const department = button.getAttribute('data-department');
            const request_date = button.getAttribute('data-request-date');
            const item_condition = button.getAttribute('data-condition');
            const id = button.getAttribute('data-id');

            // Safely populate modal fields with extracted data
            const updateFields = [
                { selector: '#update-category', value: category },
                { selector: '#update-item-name', value: item_name },
                { selector: '#update-product-number', value: product_number },
                { selector: '#update-serial-number', value: serial_number },
                { selector: '#update-model', value: model },
                { selector: '#update-brand', value: brand },
                { selector: '#update-amount', value: amount },
                { selector: '#update-personnel', value: personnel },
                { selector: '#update-department', value: department },
                { selector: '#update-request-date', value: request_date },
                { selector: '#update-condition', value: item_condition }
            ];

            updateFields.forEach(field => {
                const element = document.querySelector(field.selector);
                if (element) {
                    element.value = field.value || '';
                }
            });

            // Set the ID for save changes button
            const saveChangesBtn = document.querySelector('#save-changes-btn');
            if (saveChangesBtn) {
                saveChangesBtn.setAttribute('data-id', id);
            }
        });
    });

    // Handle save changes button
    const saveChangesBtn = document.querySelector('#save-changes-btn');
    if (saveChangesBtn) {
        saveChangesBtn.addEventListener('click', () => {
            const id = saveChangesBtn.getAttribute('data-id');
            
            // Validate ID
            if (!id || id === 'null' || id === 'undefined') {
                showAlert('Error', 'Invalid item ID', 'danger');
                return;
            }

            // Safely get input values with null fallback
            const getInputValue = (selector) => {
                const element = document.querySelector(selector);
                return element ? (element.value || null) : null;
            };

            // Collect updated data
            const updatedData = {
                category: getInputValue('#update-category'),
                item_name: getInputValue('#update-item-name'),
                product_number: getInputValue('#update-product-number'),
                serial_number: getInputValue('#update-serial-number'),
                model: getInputValue('#update-model'),
                brand: getInputValue('#update-brand'),
                amount: getInputValue('#update-amount'),
                personnel: getInputValue('#update-personnel'),
                department: getInputValue('#update-department'),
                request_date: getInputValue('#update-request-date'),
                item_condition: getInputValue('#update-condition')
            };

            // Send the updated data to the server
            fetch(`/item/update/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updatedData),
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update the table row
                    const row = document.querySelector(`#personel-row-${id}`);
                    if (row) {
                        const updateRowField = (field, value) => {
                            const fieldElement = row.querySelector(`[data-field="${field}"]`);
                            if (fieldElement) {
                                fieldElement.textContent = value || '';
                            }
                        };

                        updateRowField('category', updatedData.category);
                        updateRowField('item', updatedData.item_name);
                        updateRowField('product_number', updatedData.product_number);
                        updateRowField('serial_number', updatedData.serial_number);
                        updateRowField('model', updatedData.model);
                        updateRowField('brand', updatedData.brand);
                        updateRowField('amount', updatedData.amount);
                        updateRowField('personnel', updatedData.personnel);
                        updateRowField('department', updatedData.department);
                        updateRowField('request_date', updatedData.request_date);
                        updateRowField('condition', updatedData.item_condition);

                        // Close the modal (using jQuery if available)
                        if (typeof $ !== 'undefined') {
                            $('#updateItemModal').modal('hide');
                        }

                        // Show success alert
                        showAlert('Success', 'Item updated successfully', 'success');
                    }
                } else {
                    showAlert('Error', 'Failed to update item', 'danger');
                }
            })
            .catch(err => {
                console.error('Error:', err);
                // showAlert('Error', 'An error occurred while updating the item', 'danger');
                location.reload();
            });
        });
    }

    // Reusable alert function
    function showAlert(title, message, type = 'info') {
        // Remove any existing alerts
        const existingAlerts = document.querySelectorAll('.custom-alert');
        existingAlerts.forEach(alert => alert.remove());

        // Create alert element
        const alertElement = document.createElement('div');
        alertElement.className = `custom-alert alert alert-${type} alert-dismissible fade show`;
        alertElement.style.position = 'fixed';
        alertElement.style.top = '20px';
        alertElement.style.left = '50%';
        alertElement.style.transform = 'translateX(-50%)';
        alertElement.style.zIndex = '1050';
        alertElement.style.minWidth = '300px';
        
        // Alert content
        alertElement.innerHTML = `
            <strong>${title}!</strong> ${message}
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        `;

        // Add close event listener
        const closeButton = alertElement.querySelector('.close');
        closeButton.addEventListener('click', () => {
            alertElement.remove();
        });

        // Append to body
        document.body.appendChild(alertElement);

        // Automatically remove after 3 seconds
        setTimeout(() => {
            if (document.body.contains(alertElement)) {
                alertElement.remove();
            }
        }, 3000);
    }
});


document.addEventListener('DOMContentLoaded', function() {
    const deleteButtons = document.querySelectorAll('.delete-btn');
    const deleteModal = document.getElementById('deleteItemModal');
    const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
    const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');

    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            const itemId = this.closest('tr').querySelector('.update-btn').getAttribute('data-id');
            const itemName = this.closest('tr').querySelector('[data-field="item"]').textContent.trim();
            const itemCategory = this.closest('tr').querySelector('[data-field="category"]').textContent.trim();

            document.getElementById('deleteItemName').textContent = itemName;
            document.getElementById('deleteItemCategory').textContent = itemCategory;
            
            // Store item ID on the confirm button
            confirmDeleteBtn.setAttribute('data-item-id', itemId);

            // Show modal
            deleteModal.classList.remove('hidden');
        });
    });

    // Cancel button
    cancelDeleteBtn.addEventListener('click', function() {
        deleteModal.classList.add('hidden');
    });

    // Confirm delete button
    confirmDeleteBtn.addEventListener('click', function() {
    const itemId = this.getAttribute('data-item-id');

    fetch(`/item/delete/${itemId}`, {
        method: 'DELETE'
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to delete item');
        }
        return response.text();
    })
    .then(message => {
        // Remove the row from the table
        const rowToRemove = document.querySelector(`.update-btn[data-id="${itemId}"]`).closest('tr');
        if (rowToRemove) {
            rowToRemove.remove();
        }
        // Hide modal
        deleteModal.classList.add('hidden');
        
        // Optional: Show a success message
        alert(message);
        location.reload();
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Failed to delete item');
    });
});
});


document.addEventListener('DOMContentLoaded', function() {
    // Search functionality for items
    const searchInput = document.getElementById('searchInput');
    const itemTable = document.querySelector('table tbody');

    if (searchInput && itemTable) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase().trim();
            const rows = itemTable.querySelectorAll('tr');

            rows.forEach(row => {
                const itemNameCell = row.querySelector('[data-field="item"]');
                
                if (itemNameCell) {
                    const itemName = itemNameCell.textContent.toLowerCase().trim();
                    
                    if (searchTerm === '' || itemName.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            });

            // Optional: Show/hide a "No results" message
            const visibleRows = Array.from(rows).filter(row => row.style.display !== 'none');
            
            // Remove any existing no results message
            const existingNoResultsMessage = document.getElementById('no-results-message');
            if (existingNoResultsMessage) {
                existingNoResultsMessage.remove();
            }

            if (visibleRows.length === 0 && searchTerm !== '') {
                const noResultsRow = document.createElement('tr');
                noResultsRow.id = 'no-results-message';
                noResultsRow.innerHTML = `
                    <td colspan="13" class="text-center text-gray-500 py-4">
                        No items found matching "${searchTerm}"
                    </td>
                `;
                itemTable.appendChild(noResultsRow);
            }
        });
    }
});


document.addEventListener('DOMContentLoaded', () => {
    const generateReportsBtn = document.getElementById('generatePersonnelReportsBtn');
    
    if (generateReportsBtn) {
        generateReportsBtn.addEventListener('click', () => {
            // Dynamically load jsPDF library
            const script = document.createElement('script');
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js';
            script.onload = () => {
                generatePersonnelReports();
            };
            document.head.appendChild(script);
        });
    }

    function generatePersonnelReports() {
        // Collect all items from the table exactly as they appear
        const items = Array.from(document.querySelectorAll('tbody tr')).map(row => ({
            item_name: row.querySelector('td[data-field="item"]')?.textContent.trim() || '',
            product_number: row.querySelector('td[data-field="item"]')?.nextElementSibling?.textContent.trim() || '',
            serial_number: row.querySelector('td[data-field="item"]')?.nextElementSibling?.nextElementSibling?.textContent.trim() || '',
            model: row.querySelector('td[data-field="item"]')?.nextElementSibling?.nextElementSibling?.nextElementSibling?.textContent.trim() || '',
            brand: row.querySelector('td[data-field="item"]')?.nextElementSibling?.nextElementSibling?.nextElementSibling?.nextElementSibling?.textContent.trim() || '',
            amount: row.querySelector('td[data-field="item"]')?.nextElementSibling?.nextElementSibling?.nextElementSibling?.nextElementSibling?.nextElementSibling?.textContent.trim() || '',
            personnel: row.querySelector('td[data-field="personnel"]')?.textContent.trim() || '',
            request_date: row.querySelector('td[data-field="department"]')?.previousElementSibling?.textContent.trim() || '',
            item_condition: row.querySelector('td[data-field="item-condition"]')?.textContent.trim() || ''
        })).filter(item => item.personnel); // Remove empty entries

        // Group items by personnel
        const personnelGroups = items.reduce((acc, item) => {
            if (!acc[item.personnel]) {
                acc[item.personnel] = [];
            }
            acc[item.personnel].push(item);
            return acc;
        }, {});

        // Generate consolidated PDF for all personnel
        generateConsolidatedPDF(personnelGroups);
    }

    function generateConsolidatedPDF(personnelGroups) {
        // Create a new jsPDF instance
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({
            orientation: 'landscape',
            unit: 'mm',
            format: 'a4'
        });

        // Set up document properties
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');

        // Iterate through personnel groups
        let isFirstPage = true;
        Object.entries(personnelGroups).forEach(([personnelName, items], personnelIndex) => {
            // Add new page for each personnel group after the first
            if (!isFirstPage) {
                doc.addPage();
            }
            isFirstPage = false;

            // Add title
            doc.text(`Item Assignment Report for ${personnelName}`, 105, 15, { align: 'center' });

            // Table headers matching the reduced columns
            const headers = [
                'Item', 'Product No', 'Serial No', 
                'Model', 'Brand', 'Amount', 
                'Request Date', 'Condition'
            ];

            // Table configuration
            const startX = 10;
            const startY = 25;
            const pageWidth = doc.internal.pageSize.width;
            const colWidth = (pageWidth - 20) / headers.length;

            // Draw headers
            doc.setTextColor(0, 0, 0);
            headers.forEach((header, index) => {
                doc.text(header, startX + index * colWidth, startY, { align: 'left' });
            });

            // Draw line under headers
            doc.setLineWidth(0.5);
            doc.line(startX, startY + 5, pageWidth - startX, startY + 5);

            // Reset font for table content
            doc.setFontSize(8);
            doc.setFont('helvetica', 'normal');

            // Add items to the table
            let currentY = startY + 10;
            items.forEach((item, rowIndex) => {
                // Check if we need a new page
                if (currentY > 280) {
                    doc.addPage();
                    currentY = 15;
                }

                // Prepare row data to match reduced columns
                const rowData = [
                    item.item_name,
                    item.product_number,
                    item.serial_number,
                    item.model,
                    item.brand,
                    item.amount,
                    item.request_date,
                    item.item_condition
                ];

                // Draw row data
                rowData.forEach((cellData, colIndex) => {
                    doc.text(
                        String(cellData || ''), 
                        startX + colIndex * colWidth, 
                        currentY, 
                        { align: 'left' }
                    );
                });

                currentY += 7;

                // Optional: Alternate row background
                if (rowIndex % 2 === 1) {
                    doc.setFillColor(240, 240, 240);
                    doc.rect(startX, currentY - 7, pageWidth - 2 * startX, 7, 'F');
                }
            });

            // Add footer
            doc.setFontSize(8);
            doc.text(
                `Generated on: ${new Date().toLocaleString()}`, 
                pageWidth / 2, 
                doc.internal.pageSize.height - 10, 
                { align: 'center' }
            );
        });

        // Save the consolidated PDF
        doc.save('personnel_items_report.pdf');
    }
});
</script>

<%- include('includes/footer') %>
<%- include('includes/scripts') %>